<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="FB_CoeSdoAccess" Id="{af1d081a-b9e2-4431-a9fa-976630c1f80f}" SpecialFunc="None">
    <Declaration><![CDATA[(*

TwinCAT diagnosis tools library
======================================

quick start
-----------------------


SDO query after boot at once
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


.. code-block:: pascal

	PROGRAM MAIN
	VAR CONSTANT
		EC_MASTER_NETID : T_AmsNetId := '10.200.64.8.4.1';	
	END_VAR
	VAR
		// COE SDO communication controller object 
		sdo_controller : FB_CoeSdoAccess(sNetId := EC_MASTER_NETID); // EtherCAT Master Object for SDO control
	
	
		(* 
			For initialization process( Get all subdevices identity from SDO )
		*)
	
		bInitialize :BOOL := TRUE;
		s_adr :UINT;
	
		// define data store.
		sdo_slave_id_data : ARRAY [1002..1008] OF sdo_slave_identity;
	END_VAR	
	
	sdo_controller();

	// Get Identity data for all sub devices
	IF bInitialize THEN
		FOR s_adr := 1002 TO 1008 DO
			sdo_controller.query(
				nSlaveAddr := s_adr,
				bCompleteAccess := TRUE,
				nIndex := 16#1018,
				nSubIndex := 0,
				pDstBuf := ADR(sdo_slave_id_data[s_adr]),
				cbBufLen := SIZEOF(sdo_slave_id_data[s_adr]),
				event_handler := 0
			);
		END_FOR
		bInitialize := FALSE;	
	END_IF


SDO query cyclically and processing data by original event handler
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++


First of all, you can define event handler function block as implementing "ITF_CoeSdoEventHandler" interface which the sdo_data_received method would be executed when sdo data was received.



.. code-block:: pascal

	FUNCTION_BLOCK sdo_watch_time_logging IMPLEMENTS ITF_CoeSdoEventHandler
	VAR_INPUT
	END_VAR
	VAR_OUTPUT
	END_VAR
	VAR
		cycle_time: ULINT;
		datetime_string: STRING;
		last_time :TIMESTRUCT;
	END_VAR

	METHOD sdo_data_received : BOOL
	VAR_INPUT
		command : REFERENCE TO CoeSdoCommand;
	END_VAR
	VAR
	END_VAR
	
	cycle_time := SYSTEMTIME_TO_FILETIME64(command.datetime) - SYSTEMTIME_TO_FILETIME64(last_time);
	datetime_string := SYSTEMTIME_TO_ISO8601(
		systemTime := command.datetime,
		nBias := -540,
		bUTC := TRUE,
		nPrecision := 3
	);
	last_time := command.datetime;


This event handler need to be defined in event handler argument in query method.
	
.. code-block:: pascal

	PROGRAM MAIN
	VAR CONSTANT
		EC_MASTER_NETID : T_AmsNetId := '10.200.64.8.4.1';	
	END_VAR
	VAR
		bInitialize :BOOL := TRUE;
		sdo_controller : FB_CoeSdoAccess(sNetId := EC_MASTER_NETID); // EtherCAT Master Object for SDO control

		(*
			 Observation by EL6695 diagnosis data
		*)
		
		// define data store.
		sdo_EL6695_diag_data : sdo_EL6695_diag;
		
		// define event handler when sdo data received by "ITF_CoeSdoEventHandler" implementation.  
		sdo_protocol_with_time_detection: sdo_watch_time_logging;
	
		// cycle timer for "sdo_EL6695_diag_data" reading.
		read_cycle_timer : TON;
		
		// get ISO 8601 format datetime and cycle time for sdo data received generated by "sdo_protocol_with_time_detection.sdo_data_received()" method.
		datetime_string: STRING(39);
		cycle_time :ULINT;

	END_VAR
	
	// Get diagnostics data every 0.5s
	read_cycle_timer(IN := NOT read_cycle_timer.Q, PT := T#500MS);
	
	IF read_cycle_timer.Q THEN
		sdo_controller.query(
					nSlaveAddr := 1008,
					bCompleteAccess := TRUE,
					nIndex := 16#FA20,
					nSubIndex := 0,
					pDstBuf := ADR(sdo_EL6695_diag_data),
					cbBufLen := SIZEOF(sdo_EL6695_diag_data),
					event_handler := sdo_protocol_with_time_detection
				);
	END_IF
	
	datetime_string := sdo_protocol_with_time_detection.sDateTime;
	cycle_time := sdo_protocol_with_time_detection.lCycleTime;
	
*)
FUNCTION_BLOCK FB_CoeSdoAccess
VAR_INPUT
END_VAR
VAR_OUTPUT
END_VAR
VAR
	_event_handler : ITF_CoeSdoEventHandler;
	bInitialize : BOOL := TRUE;
	_queue: queue;
	fbSdoRead : FB_ECCoeSdoReadEx;
	sdo_command: REFERENCE TO CoeSdoCommand;
	_step :UINT;
	_sNetId: T_AmsNetId;
	
	  // Get UTC time
 	fbLocalTime: FB_LocalSystemTime := (bEnable:=TRUE, dwCycle:=5);     // For getting current time as local time
  	fbGetTimeZoneInformation: FB_GetTimeZoneInformation := (bExecute := TRUE);      // For getting local timezone information
  	fbTzSpecificLocalTimeToSystemTime: FB_TzSpecificLocalTimeToSystemTime;          // FOr converting local time to UTC.
	bExecuting :BOOL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[// Get and sync local time with PC OS.
fbLocalTime();
IF bInitialize THEN
	fbGetTimeZoneInformation(bExecute := TRUE);
	IF NOT fbGetTimeZoneInformation.bBusy THEN
		fbGetTimeZoneInformation(bExecute := FALSE);
		bInitialize := FALSE;
	END_IF
END_IF


CASE _step OF
	0:
		IF _queue.queue_usage > 0 AND NOT fbSdoRead.bBusy THEN
			sdo_command REF= _queue.get();
			_step := 1;
		END_IF
	1:
		fbSdoRead(
			sNetId := sdo_command.sNetId, // Change it as an individual situation
		 	nSlaveAddr := sdo_command.nSlaveAddr, // Change it as an individual situation
		  	nIndex := sdo_command.nIndex,
		  	nSubIndex := sdo_command.nSubIndex,
		  	pDstBuf := sdo_command.pDstBuf,
		  	cbBufLen := sdo_command.cbBufLen,
		  	bExecute := TRUE,
		  	bCompleteAccess := sdo_command.bCompleteAccess,
		  	bError => sdo_command.bError,
		  	nErrId => sdo_command.nErrId
		);
		IF fbSdoRead.bBusy THEN
			_step := 2;
		END_IF
	2:	
		fbSdoRead(bExecute := FALSE);
		IF NOT fbSdoRead.bBusy THEN
			IF NOT fbSdoRead.bError THEN
				fbTzSpecificLocalTimeToSystemTime(in := fbLocalTime.systemTime, tzInfo := fbGetTimeZoneInformation.tzInfo);
				sdo_command.datetime := fbTzSpecificLocalTimeToSystemTime.out;
				IF sdo_command.event_handler <> 0 THEN
					sdo_command.event_handler.sdo_data_received(sdo_command);				
				END_IF
			END_IF
			_step := 0;
		END_IF
END_CASE


]]></ST>
    </Implementation>
    <Method Name="FB_init" Id="{5c8448cf-a107-42e7-acf3-9fa5412595d4}">
      <Declaration><![CDATA[METHOD FB_init : BOOL
VAR_INPUT
	bInitRetains : BOOL; // if TRUE, the retain variables are initialized (warm start / cold start)
	bInCopyCode : BOOL;  // if TRUE, the instance afterwards gets moved into the copy code (online change)
	sNetId				: T_AmsNetId;	// AMS Net ID of EtherCAT Master
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[_sNetId := sNetId;]]></ST>
      </Implementation>
    </Method>
    <Property Name="NetId" Id="{36d7bbdc-152e-4cdc-9db0-2aeba2f535c1}">
      <Declaration><![CDATA[PROPERTY NetId : T_AmsNetId]]></Declaration>
      <Get Name="Get" Id="{3ed6b083-0992-47d2-95c3-a12cab4cd41a}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[NetId := _sNetId;]]></ST>
        </Implementation>
      </Get>
      <Set Name="Set" Id="{3ad599dd-c81b-48de-8b31-e431d7e107b9}">
        <Declaration><![CDATA[VAR
END_VAR
]]></Declaration>
        <Implementation>
          <ST><![CDATA[_sNetId := NetId;]]></ST>
        </Implementation>
      </Set>
    </Property>
    <Method Name="query" Id="{b8744161-09e6-4268-88bf-a1381c7e51ec}">
      <Declaration><![CDATA[METHOD query : POINTER TO CoeSdoCommand
VAR_INPUT
	nSlaveAddr	: UINT;
	(* Enable complete access*)
	bCompleteAccess	: BOOL := TRUE;
	(* Index of OD*)
	nIndex	: WORD;
	(* Subindex of OD*)
	nSubIndex	: BYTE := 0;
	(* Pointer to data body *)
	pDstBuf	: PVOID;
	(* Size of data body*)
	cbBufLen	: UDINT;
	(* Event Handler Interface *)
	event_handler : ITF_CoeSdoEventHandler := 0;
END_VAR

VAR_STAT
	command: CoeSdoCommand;	
END_VAR]]></Declaration>
      <Implementation>
        <ST><![CDATA[IF NOT _queue.full THEN
	command.sNetId := _sNetId;
	command.nSlaveAddr := nSlaveAddr;
	command.bCompleteAccess := bCompleteAccess;
	command.nIndex := nIndex;
	command.nSubIndex := nSubIndex;
	command.pDstBuf := pDstBuf;
	command.cbBufLen := cbBufLen;
	command.event_handler := event_handler;
	query := _queue.put(command);
END_IF
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_CoeSdoAccess">
      <LineId Id="301" Count="36" />
      <LineId Id="598" Count="0" />
      <LineId Id="339" Count="9" />
      <LineId Id="293" Count="0" />
    </LineIds>
    <LineIds Name="FB_CoeSdoAccess.FB_init">
      <LineId Id="7" Count="0" />
    </LineIds>
    <LineIds Name="FB_CoeSdoAccess.NetId.Get">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CoeSdoAccess.NetId.Set">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CoeSdoAccess.query">
      <LineId Id="43" Count="0" />
      <LineId Id="104" Count="0" />
      <LineId Id="97" Count="4" />
      <LineId Id="96" Count="0" />
      <LineId Id="102" Count="0" />
      <LineId Id="70" Count="0" />
      <LineId Id="47" Count="0" />
      <LineId Id="5" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>