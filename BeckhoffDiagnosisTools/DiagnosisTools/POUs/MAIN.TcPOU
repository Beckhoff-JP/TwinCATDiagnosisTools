<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1" ProductVersion="3.1.4024.12">
  <POU Name="MAIN" Id="{080620c4-4d48-4567-b571-4353eab43d24}" SpecialFunc="None">
    <Declaration><![CDATA[PROGRAM MAIN
VAR CONSTANT
	EC_MASTER_NETID : T_AmsNetId := '10.200.64.8.4.1';	
END_VAR
VAR

	// COE SDO communication controller object 
	sdo_controller : FB_CoeSdoAccess(sNetId := EC_MASTER_NETID); // EtherCAT Master Object for SDO control


	(* 
		For initialization process( Get all subdevices identity from SDO )
	*)

	bInitialize :BOOL := TRUE;
	s_adr :UINT;

	// define data store.
	sdo_slave_id_data : ARRAY [1002..1008] OF sdo_slave_identity;

	
	
	(*
		 Observation by EL6695 diagnosis data
	*)
	
	// define data store.
	sdo_EL6695_diag_data : sdo_EL6695_diag;
	
	// define event handler when sdo data received by "ITF_CoeSdoEventHandler" implementation.  
	sdo_protocol_with_time_detection: sdo_watch_time_logging;

	// cycle timer for "sdo_EL6695_diag_data" reading.
	read_cycle_timer : TON;
	
	// get ISO 8601 format datetime and cycle time for sdo data received generated by "sdo_protocol_with_time_detection.sdo_data_received()" method.
	datetime_string: STRING(39);
	cycle_time :ULINT;
	
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[sdo_controller();

// Get Identity data for all sub devices
IF bInitialize THEN
	FOR s_adr := 1002 TO 1008 DO
		sdo_controller.query(
			nSlaveAddr := s_adr,
			bCompleteAccess := TRUE,
			nIndex := 16#1018,
			nSubIndex := 0,
			pDstBuf := ADR(sdo_slave_id_data[s_adr]),
			cbBufLen := SIZEOF(sdo_slave_id_data[s_adr]),
			event_handler := 0
		);
	END_FOR
	bInitialize := FALSE;	
END_IF

// Get diagnostics data every 0.5s
read_cycle_timer(IN := NOT read_cycle_timer.Q, PT := T#500MS);

IF read_cycle_timer.Q THEN
	sdo_controller.query(
				nSlaveAddr := 1008,
				bCompleteAccess := TRUE,
				nIndex := 16#FA20,
				nSubIndex := 0,
				pDstBuf := ADR(sdo_EL6695_diag_data),
				cbBufLen := SIZEOF(sdo_EL6695_diag_data),
				event_handler := sdo_protocol_with_time_detection
			);
END_IF

datetime_string := sdo_protocol_with_time_detection.sDateTime;
cycle_time := sdo_protocol_with_time_detection.lCycleTime;]]></ST>
    </Implementation>
    <LineIds Name="MAIN">
      <LineId Id="364" Count="4" />
      <LineId Id="373" Count="0" />
      <LineId Id="415" Count="4" />
      <LineId Id="413" Count="0" />
      <LineId Id="456" Count="0" />
      <LineId Id="414" Count="0" />
      <LineId Id="374" Count="5" />
      <LineId Id="381" Count="1" />
      <LineId Id="387" Count="0" />
      <LineId Id="407" Count="0" />
      <LineId Id="411" Count="0" />
      <LineId Id="408" Count="0" />
      <LineId Id="412" Count="0" />
      <LineId Id="409" Count="1" />
      <LineId Id="457" Count="0" />
      <LineId Id="405" Count="0" />
      <LineId Id="388" Count="0" />
      <LineId Id="482" Count="0" />
      <LineId Id="14" Count="0" />
      <LineId Id="483" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>